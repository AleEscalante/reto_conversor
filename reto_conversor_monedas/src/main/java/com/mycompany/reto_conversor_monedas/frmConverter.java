/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.reto_conversor_monedas;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author Alejandro
 */
public class frmConverter extends javax.swing.JFrame {

    private Double conversion;
    private ArrayList<String> units = new ArrayList<>(Arrays.asList(""));
    private ArrayList<String> unitsConvertTo = new ArrayList<>(Arrays.asList(""));

    private final Map<String, Double> conversionFactorsMap = new HashMap<String, Double>() {
        {
            //Monedas conversion
            put("Dólares a Euros", 0.85);
            put("Dólares a Libras Esterlinas", 0.72);
            put("Dólares a Yen Japonés", 109.50);
            put("Dólares a Won sul-coreano", 1167.57);

            put("Euros a Dólares", 1.18);
            put("Euros a Libras Esterlinas", 0.85);
            put("Euros a Yen Japonés", 130.07);
            put("Euros a Won sul-coreano", 1387.27);

            put("Libras Esterlinas a Dólares", 1.39);
            put("Libras Esterlinas a Euros", 1.17);
            put("Libras Esterlinas a Yen Japonés", 152.53);
            put("Libras Esterlinas a Won sul-coreano", 1624.03);

            put("Yen Japonés a Dólares", 0.0091);
            put("Yen Japonés a Euros", 0.0077);
            put("Yen Japonés a Libras Esterlinas", 0.0066);
            put("Yen Japonés a Won sul-coreano", 10.61);

            put("Won sul-coreano a Dólares", 0.00086);
            put("Won sul-coreano a Euros", 0.00072);
            put("Won sul-coreano a Libras Esterlinas", 0.00062);
            put("Won sul-coreano a Yen Japonés", 0.094);

            //Longitud conversion
            put("Metros a Pies", 3.28084);
            put("Metros a Pulgadas", 39.37008);

            put("Pies a Metros", 0.3048);
            put("Pies a Pulgadas", 12.0);

            put("Pulgadas a Metros", 0.0254);
            put("Pulgadas a Pies", 0.0833);

            //Peso conversion
            put("Kilogramos a Libras", 2.20462);
            put("Kilogramos a Onzas", 35.27396);

            put("Libras a Kilogramos", 0.453592);
            put("Libras a Onzas", 16.0);

            put("Onzas a Kilogramos", 0.0283495);
            put("Onzas a Libras", 0.0625);
        }
    };

    /**
     * Creates new form frmConversor
     */
    private UnitsComboBoxModel unitsModel = new UnitsComboBoxModel();
    private UnitsComboBoxModel unitsConvertToModel = new UnitsComboBoxModel();

    public frmConverter() {
        initComponents();
        this.setResizable(false);
        cmbOptions.setSelectedIndex(0);
        lblConversion.setText("");
        btnClipboard.setVisible(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        txtValueToConvert = new javax.swing.JTextField();
        cmbOptions = new javax.swing.JComboBox<>();
        lblOptions = new javax.swing.JLabel();
        cmbUnits = new javax.swing.JComboBox<>();
        lblUnits = new javax.swing.JLabel();
        lblConvertTo = new javax.swing.JLabel();
        cmbConvertTo = new javax.swing.JComboBox<>();
        lblConversion = new javax.swing.JLabel();
        btnConvert = new javax.swing.JButton();
        btnClipboard = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle.setText("Conversor");

        txtValueToConvert.setForeground(new java.awt.Color(153, 153, 153));
        txtValueToConvert.setText("Valor a convertir");
        txtValueToConvert.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtValueToConvertFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValueToConvertFocusLost(evt);
            }
        });
        txtValueToConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValueToConvertActionPerformed(evt);
            }
        });
        txtValueToConvert.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtValueToConvertKeyTyped(evt);
            }
        });

        cmbOptions.setModel(new OptionsComboBoxModel());
        cmbOptions.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOptionsItemStateChanged(evt);
            }
        });
        cmbOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOptionsActionPerformed(evt);
            }
        });

        lblOptions.setText("Opciones de conversor");

        cmbUnits.setModel(new UnitsComboBoxModel());
        cmbUnits.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbUnitsItemStateChanged(evt);
            }
        });
        cmbUnits.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbUnitsFocusGained(evt);
            }
        });
        cmbUnits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUnitsActionPerformed(evt);
            }
        });

        lblUnits.setText("Unidades");

        lblConvertTo.setText("Convertir a");

        cmbConvertTo.setModel(new UnitsComboBoxModel());

        lblConversion.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblConversion.setText("Conversion");

        btnConvert.setText("Convertir");
        btnConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertActionPerformed(evt);
            }
        });

        btnClipboard.setText("Copiar");
        btnClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClipboardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnClipboard)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(34, 34, 34)
                                        .addComponent(txtValueToConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addComponent(lblUnits, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(cmbUnits, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(lblConvertTo, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(cmbConvertTo, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnConvert)
                        .addGap(299, 299, 299))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblConversion, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(166, 166, 166))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblTitle)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUnits)
                            .addComponent(lblConvertTo))
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOptions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValueToConvert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbConvertTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addComponent(btnConvert)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConversion)
                    .addComponent(btnClipboard))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtValueToConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValueToConvertActionPerformed

    }//GEN-LAST:event_txtValueToConvertActionPerformed

    private void txtValueToConvertFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValueToConvertFocusGained
        if (txtValueToConvert.getText().equals("Valor a convertir")) {
            txtValueToConvert.setText("");
            txtValueToConvert.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txtValueToConvertFocusGained

    private void txtValueToConvertFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValueToConvertFocusLost
        if (txtValueToConvert.getText().isEmpty()) {
            txtValueToConvert.setForeground(Color.GRAY);
            txtValueToConvert.setText("Valor a convertir");
        }
    }//GEN-LAST:event_txtValueToConvertFocusLost

    private void cmbOptionsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbOptionsItemStateChanged

    }//GEN-LAST:event_cmbOptionsItemStateChanged

    private void cmbUnitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUnitsActionPerformed
        // TODO add your handlingco code here:
    }//GEN-LAST:event_cmbUnitsActionPerformed

    private void cmbOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOptionsActionPerformed
        comboBoxUnitsRefresh();
    }//GEN-LAST:event_cmbOptionsActionPerformed

    private void cmbUnitsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbUnitsFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbUnitsFocusGained

    private void cmbUnitsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbUnitsItemStateChanged
        comboBoxConvertToRefresh();
    }//GEN-LAST:event_cmbUnitsItemStateChanged

    private void txtValueToConvertKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValueToConvertKeyTyped
        char c = evt.getKeyChar();
        String input = txtValueToConvert.getText().trim();
        int dotIndex = input.indexOf('.');
        boolean isTemperatureSelected = cmbOptions.getSelectedItem().equals("Temperatura");

        if (!Character.isDigit(c) && c != '.' && c != KeyEvent.VK_BACK_SPACE && (c != '-' || input.indexOf('-') != -1
                || !isTemperatureSelected || txtValueToConvert.getCaretPosition() > 0)) {
            evt.consume();
        } else if (c == '.' && (dotIndex != -1 || input.isEmpty())) {
            evt.consume();
        }

    }//GEN-LAST:event_txtValueToConvertKeyTyped

    private void btnConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertActionPerformed
        convert();
    }//GEN-LAST:event_btnConvertActionPerformed

    private void btnClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClipboardActionPerformed
        copy();
    }//GEN-LAST:event_btnClipboardActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmConverter().setVisible(true);
            }
        });
    }

    private void comboBoxUnitsRefresh() {
        units.clear();
        String option = cmbOptions.getSelectedItem().toString();

        switch (option) {
            case "Moneda":
                units.add("Dólares");
                units.add("Euros");
                units.add("Libras Esterlinas");
                units.add("Yen Japonés");
                units.add("Won sul-coreano");
                break;
            case "Longitud":
                units.add("Metros");
                units.add("Pies");
                units.add("Pulgadas");
                break;
            case "Temperatura":
                units.add("Celcius");
                units.add("Farenheit");
                units.add("Kelvin");
                break;
            case "Peso":
                units.add("Kilogramos");
                units.add("Libras");
                units.add("Onzas");
                break;
            default:
                throw new AssertionError();
        }
        unitsModel.setUnits(units);
        cmbUnits.setModel(unitsModel);
        cmbUnits.setSelectedIndex(0);
        cmbUnits.repaint();

    }

    private void comboBoxConvertToRefresh() {
        unitsConvertTo.clear();
        int optionUnits = cmbUnits.getSelectedIndex();
        unitsConvertTo.addAll(units);
        unitsConvertTo.remove(optionUnits);

        unitsConvertToModel.setUnits(unitsConvertTo);
        cmbConvertTo.setModel(unitsConvertToModel);
        cmbConvertTo.setSelectedIndex(0);
        cmbConvertTo.repaint();
    }

    private double calculateConversion(String key, double value) {
        switch (key) {
            case "Celcius a Farenheit" -> {
                return ((value * (9.0 / 5.0)) + 32);
            }
            case "Celcius a Kelvin" -> {
                return (value + 273.15);
            }
            case "Farenheit a Celcius" -> {
                return ((value - 32) * (5.0 / 9.0));
            }
            case "Farenheit a Kelvin" -> {
                return ((value + 459.67) * (5.0 / 9.0));
            }
            case "Kelvin a Celcius" -> {
                return (value - 273.15);
            }
            case "Kelvin a Farenheit" -> {
                return ((value * (9.0 / 5.0)) - 459.67);
            }
            default ->
                throw new AssertionError();
        }
    }

    private void convert() {
        String value = txtValueToConvert.getText();
        String unit = cmbUnits.getSelectedItem().toString();
        String convertTo = cmbConvertTo.getSelectedItem().toString();
        String key = unit + " a " + convertTo;
        String option = cmbOptions.getSelectedItem().toString();

        if (value.endsWith(".")) {
            value += "0";
            txtValueToConvert.setText(value);
        }

        if (option == "Temperatura") {
            conversion = Math.round(calculateConversion(key, Double.parseDouble(value)) * 100.0) / 100.0;
        } else {
            conversion = Math.round((Double.valueOf(value) * conversionFactorsMap.get(key)) * 100.0) / 100.0;
        }
        lblConversion.setText(conversion + " " + convertTo);
        btnClipboard.setVisible(true);
    }

    private void copy() {
        StringSelection selection = new StringSelection(conversion.toString());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, null);
        JOptionPane.showMessageDialog(null, "Texto copiado al portapapeles");
        lblConversion.setText("");
        btnClipboard.setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClipboard;
    private javax.swing.JButton btnConvert;
    private javax.swing.JComboBox<String> cmbConvertTo;
    private javax.swing.JComboBox<String> cmbOptions;
    private javax.swing.JComboBox<String> cmbUnits;
    private javax.swing.JLabel lblConversion;
    private javax.swing.JLabel lblConvertTo;
    private javax.swing.JLabel lblOptions;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUnits;
    private javax.swing.JTextField txtValueToConvert;
    // End of variables declaration//GEN-END:variables
}
